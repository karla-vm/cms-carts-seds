pipeline {
  agent { label "ec2-slave" }
  options {
    disableConcurrentBuilds()
    quietPeriod(0)
    ansiColor('xterm')
  }
  parameters {
    booleanParam(defaultValue: false, name: 'DESTROY_AT_THE_START', description: 'Destroy the current environment at the start of the build')
    booleanParam(defaultValue: false, name: 'DESTROY_SERVERLESS_AT_THE_START', description: 'Destroy serverless resources at the start of the build')
    booleanParam(defaultValue: false, name: 'DESTROY_FRONTEND_AT_THE_START', description: 'Destroy the current environments frontend/api layer at the start of the build')
    booleanParam(defaultValue: false, name: 'DESTROY_DATA_AT_THE_START', description: 'Destroy the current environments data layer at the start of the build')
    booleanParam(defaultValue: true, name: 'DEPLOY', description: 'Deploy the application to Amazon')
    booleanParam(defaultValue: false, name: 'RUN_TESTS', description: 'Run tests against the application')
    booleanParam(defaultValue: false, name: 'DESTROY_AT_THE_END', description: 'Destroy the environment at the end.')
  }
  environment {
    BUILD_TAG = resolveBuildTag()
    VPC_NAME = "macpro-dev"
    OIDC_CLIENT_ID = "0oa4juv4poiQ6nDB6297"
    OIDC_ISSUER = "https://test.idp.idm.cms.gov/oauth2/aus4itu0feyg3RJTK297"
    TF_VAR_openid_discovery_url = "https://test.idp.idm.cms.gov/oauth2/aus4itu0feyg3RJTK297/.well-known/openid-configuration"
  }
  stages {
    stage("Prep Agent") {
      steps {
        script {
          currentBuild.displayName = env.BUILD_TAG

          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          jenkinsUtils.installAwsCli()
          jenkinsUtils.installEcsCli()
          jenkinsUtils.installTerraform("0.13.7")

          if( env.BUILD_NUMBER == "1" ) {
            env.DEPLOY = true
            env.RUN_TESTS = true
          }
        }
      }
    }

    stage("Destroy everything at the start") {
      when {
        expression { env.DESTROY_AT_THE_START == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          dir('frontend/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "destroy",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }
          dir('data/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "destroy",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }
          dir('serverless') {
            sh '''
              sudo ./destroy.sh ${BRANCH_NAME}
            '''
          }
        }
      }
    }

    stage("Destroy Serverless at the start") {
      when {
        expression { env.DESTROY_SERVERLESS_AT_THE_START == "true"}
      }
      steps {
        script {
          dir('serverless') {
            sh '''
              sudo ./destroy.sh ${BRANCH_NAME}
            '''
          }
        }
      }
    }

    stage("Destroy Frontend/API Layer at the start") {
      when {
        expression { env.DESTROY_FRONTEND_AT_THE_START == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          dir('frontend/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "destroy",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }

        }
      }
    }

    stage("Destroy Data Layer at the start") {
      when {
        expression { env.DESTROY_DATA_AT_THE_START == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          dir('data/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "destroy",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }
        }
      }
    }
    stage("Build and Push Artifacts") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          lock('docker_socket') {
            jenkinsUtils.buildAndPushImageToEcr("data/postgres_deployer", "postgres_deployer", [env.BUILD_TAG, env.BRANCH_NAME])
            jenkinsUtils.buildAndPushImageToEcr("frontend/api_postgres", "postgres_django", [env.BUILD_TAG, env.BRANCH_NAME])
          }
        }
        dir('frontend/react') {
          sh '''
            docker run --rm -w /app -v $(pwd):/app node:14.4.0 /bin/bash -c "rm -rf build && npm ci && npm run build && cp env.sh .env build/"
            tar -zcvf cartsbuild.tar.gz build
            aws s3 cp cartsbuild.tar.gz s3://$APPLICATION_BUCKET/artifacts/$BUILD_TAG/cartsbuild.tar.gz
            rm -rf cartsbuild.tar.gz
          '''
        }
      }
    }
    stage("Scan Images") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          jenkinsUtils.fetchEcrScanResult("postgres_deployer", env.BUILD_TAG)
          jenkinsUtils.fetchEcrScanResult("postgres_django", env.BUILD_TAG)

        }
      }
      post {
        always {
          script {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'ecr_scan_*.json'
          }
        }
      }
    }

    stage("Deploy Uploads Scan") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          dir('serverless-uploads') {
            sh '''
              docker run --rm -w /app -v $(pwd):/app node:12.20.0 /bin/bash -c "./deploy.sh ${JOB_BASE_NAME}"
            '''
          }
        }
      }
    }

    stage("Deploy Data Layer") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          dir('data/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "apply",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }
        }
      }
      post {
        always {
          script {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'data/aws/log*'
          }
        }
      }
    }

    stage("Deploy Frontend Layer") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          dir('frontend/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "apply",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }

          dir('frontend/aws') {
            env.CLOUDFRONT_DISTRIBUTION_ID = jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.BRANCH_NAME, "cloudfront_distribution_id")
            env.S3_BUCKET_NAME = jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.BRANCH_NAME, "s3_bucket_name")
            env.API_POSTGRES_URL = jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.BRANCH_NAME, "api_postgres_endpoint")
            env.PRINCE_API_ENDPOINT = jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.BRANCH_NAME, "prince_api_endpoint")
          }
          sh '''
            aws s3 cp s3://$APPLICATION_BUCKET/artifacts/$BUILD_TAG/cartsbuild.tar.gz cartsbuild.tar.gz
            tar -xvzf cartsbuild.tar.gz
            #Populate the static archive with the API_POSTGRES_URL before you sync it to the host bucket
            cd build  && ./env.sh  && cd ..
            aws s3 sync build s3://${S3_BUCKET_NAME}
            # Cloudfront cache invalidation
            aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths "/*"
          '''
        }
      }
      post {
        always {
          script {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'frontend/aws/log*'
          }
        }
      }
    }

    stage("Serverless") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          dir('serverless') {
            sh '''
              docker run --rm -w /app -v $(pwd):/app node:12.20.0 /bin/bash -c "./deploy.sh ${JOB_BASE_NAME}"
            '''
          }
        }
      }
    }

    stage("Test") {
      when {
        expression { env.RUN_TESTS == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          dir('frontend/aws') {
            env.APPLICATION_ENDPOINT = jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.BRANCH_NAME, "application_endpoint")
          }
          dir('tests') {
            sh '''
              set -e
              docker run --rm -e APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT -v $(pwd)/testcafe:/tests testcafe/testcafe chromium /tests/**/*.js
            '''
          }
        }
      }
    }

    /*
    stage("Run Inspec Scans") {
      when {
        expression { env.DEPLOY == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          lock('docker_socket') {
            jenkinsUtils.buildAndPushImageToEcr("saf/postgres_rds", "inspec_postgres_rds", [env.BUILD_TAG, env.JOB_BASE_NAME])
          }
          dir('saf/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "apply",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
            jenkinsUtils.runInspecScan(
              "postgres_rds",
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_task_definition_arn"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_cluster"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_subnets"),
              jenkinsUtils.terraformOutput(env.APPLICATION_BUCKET, env.JOB_BASE_NAME, "inspec_postgres_rds_security_group")
            )
          }
        }
      }
      post {
        always {
          script {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'saf/aws/inspec_scan_result_*'
          }
        }
      }
    }
    */

    stage("Destroy at the end") {
      when {
        expression { env.DESTROY_AT_THE_END == "true"}
      }
      steps {
        script {
          def jenkinsUtils = load ".jenkins/groovy/JenkinsUtils.groovy"
          dir('frontend/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "destroy",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }
          dir('data/aws') {
            jenkinsUtils.terraformApply(env.APPLICATION_BUCKET, env.BRANCH_NAME, "destroy",
              [
                "application_version": env.BUILD_TAG,
                "vpc_name": env.VPC_NAME
              ]
            )
          }
        }
      }
    }
  }
}

def resolveBuildTag() {
  return "${BRANCH_NAME}.${GIT_COMMIT}"
}
